---
title: "Matching and Subclassification"
---

```{r}
library(tidyverse)
library(dagitty)
library(ggdag)
library(MatchIt)
library(dplyr)

membership <- readRDS("../../assignment_data/membership.rds")


```

# . Check the relationships between the variables and draw a DAG as you understand the relations.
```{r}



lm_card <- lm(avg_purch ~ card, data = membership)
summary(lm_card)

lm_card_age <- lm(avg_purch ~ age + card, data = membership)
summary(lm_card_age)

lm_card_sex <- lm(avg_purch ~ card + sex, data = membership)
summary(lm_card_sex)

lm_card_prev_avg <- lm(avg_purch ~ card + pre_avg_purch, data = membership)
summary(lm_card_prev_avg)

lm_purchase_sex <- lm(avg_purch ~ sex, data = membership)
summary(lm_purchase_sex)


```
The gender seems to have only little effect on average purchase. Whereas, age and previous average purchase seems to be the confounding variables. With this info the following DAG can be drawn.


dfr
```{r}
# DAG plot
myDAG <- dagify(
  X ~ Z1,
  Y ~ Z1,
  Y ~ X,
  X ~ Z2,
  Y ~ Z2,
  coords = list(x = c(Y = 3, X = 0, Z1 = 0, Z2 = 3),
                y = c(Y = 0, X = 0, Z1 = 2, Z2 = 2)),

  labels = list(X = "Subscription",
                Y = "Purchase Amount", 
                Z1 = "Prev_Avg_Purchase",
                Z2 = "Age")
)

# Plot DAG
ggdag(myDAG) +
  theme_dag_gray() + # custom theme, can be left out
  geom_dag_point(color = "lightgreen") +
  geom_dag_text(color = "red") +
  geom_dag_edges(edge_color = "blue") +
  geom_dag_label_repel(aes(label = label))
```


# . Compute a naive estimate of the average treatment effect.
```{r}
# mean for treated group (card = 1)
mean_treated <- mean(membership$avg_purch[membership$card == 1])

# mean for control group (card = 0)
mean_control <- mean(membership$avg_purch[membership$card == 0])

# Compute naive ATE
naive_ATE <- mean_treated - mean_control
naive_ATE

# Alternatively
naive_ATE2 <- coef(lm_card)
cat("Naive Average Treatment Effect (ATE):", naive_ATE2["card"], "\n")
```
# .Use the following matching methods to obtain more precise estimates:

## (Coarsened) Exact Matching :
```{r}
# Load 'MatchIt' library
library(MatchIt)

# Without specifying coarsening
# (1) Matching
cem <- matchit(card ~ age + pre_avg_purch,
               data = membership, 
               method = 'cem', 
               estimand = 'ATE')
# Covariate balance
summary(cem)

# Use matched data
df_cem <- match.data(cem)

# (2) Estimation
model_cem <- lm(avg_purch  ~ card, data = df_cem, weights = weights)
summary(model_cem)


```

## Nearest-Neighbor Matching:

```{r}
# (1) Matching
# replace: one-to-one or one-to-many matching
nn <- matchit(card ~ age + pre_avg_purch,
              data = membership,
              method = "nearest", # changed
              distance = "mahalanobis", # changed
              replace = T)

# Covariate Balance
summary(nn)

# Use matched data
df_nn <- match.data(nn)

# (2) Estimation
model_nn <- lm(avg_purch ~ card, data = df_nn, weights = weights)
summary(model_nn)
```

## Inverse Probability Weightin:

```{r}
library(dplyr)

# (1) Propensity scores
model_prop <- glm(card ~ age + pre_avg_purch,
                  data = membership,
                  family = binomial(link = "logit"))
summary(model_prop)


# Add propensities to table
df_aug <- membership %>% mutate(propensity = predict(model_prop, type = "response"))

# Extend data by IPW scores
df_ipw <- df_aug %>% mutate(
  ipw = (card/propensity) + ((1-card) / (1-propensity)))

# Look at data with IPW scores
df_ipw %>% 
  select(card, age, pre_avg_purch, propensity, ipw)


# (2) Estimation
model_ipw <- lm(avg_purch ~ card,
                data = df_ipw, 
                weights = ipw)
summary(model_ipw)
# 
# 
# # Plot histogram of estimated propensities
# ggplot(df_aug, aes(x = propensity)) +
#   geom_histogram(alpha = .3, color = "blue")
# 
# # Looking for observations with highest weights
# df_ipw %>% 
#   select(card, age, pre_avg_purch, propensity, ipw) %>% 
#   arrange(desc(ipw))
# 
# # Run with high weights excluded
# model_ipw_trim <- lm(avg_purch ~ card,
#                 data = df_ipw %>% filter(propensity %>% between(0.15, 0.85)),
#                 weights = ipw)
# summary(model_ipw_trim)

```


